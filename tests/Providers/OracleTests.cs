using PolyDb.Enums;

namespace PolyDb.Tests.Providers;

/// <summary>
/// Test suite for Oracle using PolyDb.
/// </summary>
public class OracleTests
{
    /// <summary>
    /// Defines a simple Order class for testing.
    /// </summary>
    public class Order
    {
        public int Id { get; set; }
        public string Item { get; set; } = "";
        public int Quantity { get; set; }
    }

    private const string OracleConnectionString = "DATA SOURCE=localhost:1521/XEPDB1;USER ID=myuser;PASSWORD=mypass;";

    // Oracle setup is typically more involved, often requiring specific user privileges
    // and connection details. This helper is a simplified placeholder.
    private static Task<PolyDb> GetConnectedPolyDb()
    {
        var db = PolyDb.Connect(DatabaseType.Oracle, OracleConnectionString);
        // Oracle table creation often requires specific syntax and privileges.
        // For a real test, you'd need to ensure the user has CREATE TABLE privileges
        // and handle sequences/triggers for auto-incrementing IDs.
        // Example: CREATE TABLE TestOrders (Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, Item VARCHAR2(100), Quantity NUMBER, PRIMARY KEY(Id))
        // For now, we'll assume the table exists or is created externally for skipped tests.
        return Task.FromResult(db);
    }

    [Fact]
    public async Task Test_Oracle_CreateTable()
    {
        // Arrange
        await using var db = PolyDb.Connect(DatabaseType.Oracle, OracleConnectionString);
        var tableName = "TEST_ORDERS_" + Guid.NewGuid().ToString().Replace("-", "")[..8].ToUpper();

        // Act
        // Oracle table creation with identity column
        await db.ExecuteAsync($"CREATE TABLE {tableName} (Id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, Item VARCHAR2(100), Quantity NUMBER, PRIMARY KEY(Id))");

        // Assert (check if table exists)
        var exists = await db.QueryAsync<int>($"SELECT COUNT(*) FROM USER_TABLES WHERE TABLE_NAME = '{tableName}'");
        Assert.Equal(1, exists[0]);

        // Clean up
        await db.ExecuteAsync($"DROP TABLE {tableName} CASCADE CONSTRAINTS");
    }

    [Fact]
    public async Task Test_Oracle_InsertRecord()
    {
        // Arrange
        await using var db = await GetConnectedPolyDb();
        var uniqueItem = "InsertItem_" + Guid.NewGuid().ToString()[..8];

        // Act
        var rowsAffected = await db.ExecuteAsync(
            "INSERT INTO TEST_ORDERS (Item, Quantity) VALUES (:Item, :Quantity)",
            new Dictionary<string, object>
            {
                [":Item"] = uniqueItem,
                [":Quantity"] = 10
            }
        );

        // Assert
        Assert.Equal(1, rowsAffected);
        var orders = await db.QueryAsync<Order>("SELECT Item FROM TEST_ORDERS WHERE Item = :Item", new Dictionary<string, object> { [":Item"] = uniqueItem });
        Assert.Single(orders);
        Assert.Equal(uniqueItem, orders[0].Item);
    }

    [Fact]
    public async Task Test_Oracle_QueryRecords()
    {
        // Arrange
        await using var db = await GetConnectedPolyDb();
        var uniqueItem1 = "QueryItem1_" + Guid.NewGuid().ToString()[..8];
        var uniqueItem2 = "QueryItem2_" + Guid.NewGuid().ToString()[..8];
        await db.ExecuteAsync("INSERT INTO TEST_ORDERS (Item, Quantity) VALUES (:Item, :Quantity)", new Dictionary<string, object> { [":Item"] = uniqueItem1, [":Quantity"] = 20 });
        await db.ExecuteAsync("INSERT INTO TEST_ORDERS (Item, Quantity) VALUES (:Item, :Quantity)", new Dictionary<string, object> { [":Item"] = uniqueItem2, [":Quantity"] = 30 });

        // Act
        var orders = await db.QueryAsync<Order>(
            "SELECT Id, Item, Quantity FROM TEST_ORDERS WHERE Quantity > :MinQuantity ORDER BY Quantity",
            new Dictionary<string, object>
            {
                [":MinQuantity"] = 15
            }
        );

        // Assert
        Assert.Equal(2, orders.Count);
        Assert.Equal(uniqueItem1, orders[0].Item);
        Assert.Equal(20, orders[0].Quantity);
        Assert.Equal(uniqueItem2, orders[1].Item);
        Assert.Equal(30, orders[1].Quantity);
    }

    [Fact]
    public async Task Test_Oracle_UpdateRecord()
    {
        // Arrange
        await using var db = await GetConnectedPolyDb();
        var uniqueItem = "UpdateItem_" + Guid.NewGuid().ToString()[..8];
        await db.ExecuteAsync("INSERT INTO TEST_ORDERS (Item, Quantity) VALUES (:Item, :Quantity)", new Dictionary<string, object> { [":Item"] = uniqueItem, [":Quantity"] = 40 });

        // Act
        var rowsAffected = await db.ExecuteAsync(
            "UPDATE TEST_ORDERS SET Quantity = :NewQuantity WHERE Item = :Item",
            new Dictionary<string, object>
            {
                [":NewQuantity"] = 45,
                [":Item"] = uniqueItem
            }
        );

        // Assert
        Assert.Equal(1, rowsAffected);
        var updatedOrders = await db.QueryAsync<Order>("SELECT Quantity FROM TEST_ORDERS WHERE Item = :Item", new Dictionary<string, object> { [":Item"] = uniqueItem });
        Assert.Single(updatedOrders);
        Assert.Equal(45, updatedOrders[0].Quantity);
    }

    [Fact]
    public async Task Test_Oracle_DeleteRecord()
    {
        // Arrange
        await using var db = await GetConnectedPolyDb();
        var uniqueItem = "DeleteItem_" + Guid.NewGuid().ToString()[..8];
        await db.ExecuteAsync("INSERT INTO TEST_ORDERS (Item, Quantity) VALUES (:Item, :Quantity)", new Dictionary<string, object> { [":Item"] = uniqueItem, [":Quantity"] = 50 });

        // Act
        var rowsAffected = await db.ExecuteAsync(
            "DELETE FROM TEST_ORDERS WHERE Item = :Item",
            new Dictionary<string, object>
            {
                [":Item"] = uniqueItem
            }
        );

        // Assert
        Assert.Equal(1, rowsAffected);
        var remainingOrders = await db.QueryAsync<Order>("SELECT Id FROM TEST_ORDERS WHERE Item = :Item", new Dictionary<string, object> { [":Item"] = uniqueItem });
        Assert.Empty(remainingOrders);
    }
}